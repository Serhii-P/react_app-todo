{"version":3,"sources":["components/TodoForm.js","components/Todo.js","components/Footer.js","App.js","index.js"],"names":["TodoForm","state","text","handleChange","event","setState","target","name","value","handleSubmit","preventDefault","props","onSubmit","complete","id","shortid","generate","className","this","onChange","placeholder","Component","Todo","type","todo","toggleComplete","htmlFor","style","textDecoration","color","onClick","onDelete","Footer","display","todos","filter","length","href","updateTodoShowAll","updateTodoShowActive","updateTodoShowComplete","some","removeAllComplete","App","todosToShow","addTodo","undefined","prevState","map","updateTodoShow","string","handleDeleteTodo","onToggleAllComplete","toggleAllComplete","key","React","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.a6512bd7.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport shortid from 'shortid';\nimport PropTypes from 'prop-types';\n\nclass TodoForm extends Component {\n  state = {\n    text: '',\n  };\n\n  handleChange = (event) => {\n    this.setState({\n      [event.target.name]: event.target.value,\n    });\n  }\n\nhandleSubmit = (event) => {\n  event.preventDefault();\n\n  this.props.onSubmit({\n    text: this.state.text,\n    complete: false,\n    id: shortid.generate(),\n  });\n\n  this.setState({\n    text: '',\n  });\n}\n\nrender() {\n  return (\n    <form className=\"header\" onSubmit={this.handleSubmit}>\n      <h1>todos</h1>\n\n      <input\n        name=\"text\"\n        value={this.state.text}\n        className=\"new-todo\"\n        onChange={this.handleChange}\n        placeholder=\"What needs to be done?\"\n      />\n    </form>\n  );\n}\n}\n\nexport default TodoForm;\n\nTodoForm.propTypes = {\n  onSubmit: PropTypes.func.isRequired,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nfunction Todo(props) {\n  return (\n    <li className=\"\">\n      <div className=\"view\">\n        <input\n          name=\"status\"\n          type=\"checkbox\"\n          className=\"toggle\"\n          id={props.todo.id}\n          onChange={props.toggleComplete}\n        />\n        <label\n          htmlFor=\"todo-1\"\n          style={{\n            textDecoration: props.todo.complete\n              ? 'line-through' : '',\n            color: props.todo.complete ? '#e4e4e4' : '',\n          }\n          }\n        >\n          {props.todo.text}\n        </label>\n        <button type=\"button\" className=\"destroy\" onClick={props.onDelete} />\n      </div>\n    </li>\n  );\n}\n\nexport default Todo;\n\nTodo.propTypes = {\n  todo: PropTypes.shape({\n    id: PropTypes.string,\n    text: PropTypes.string,\n    complete: PropTypes.bool,\n  }).isRequired,\n  toggleComplete: PropTypes.func.isRequired,\n  onDelete: PropTypes.func.isRequired,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nfunction Footer(props) {\n  return (\n\n    <footer className=\"footer\" style={{ display: 'block' }}>\n\n      <span className=\"todo-count\">\n        {props.todos.filter(\n          todo => !todo.complete\n        ).length} items left </span>\n\n      <ul className=\"filters\">\n        <li>\n          <a\n            href=\"#/\"\n            className=\"selected\"\n            onClick={props.updateTodoShowAll}\n          >\n              All\n          </a>\n        </li>\n\n        <li>\n          <a\n            href=\"#/active\"\n            onClick={props.updateTodoShowActive}\n          >\n            Active\n          </a>\n        </li>\n\n        <li>\n          <a\n            href=\"#/completed\"\n            onClick={props.updateTodoShowComplete}\n          >\n            Completed\n          </a>\n        </li>\n      </ul>\n\n      {props.todos.some(todo => todo.complete)\n        ? (\n          <div>\n            <button\n              type=\"button\"\n              className=\"clear-completed\"\n              style={{ display: 'block' }}\n              onClick={props.removeAllComplete}\n            >\n            Clear completed\n            </button>\n          </div>\n        ) : null\n      }\n    </footer>\n  );\n}\n\nexport default Footer;\n\nFooter.propTypes = {\n  todos: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.string,\n      text: PropTypes.string,\n      complete: PropTypes.bool,\n    })\n  ).isRequired,\n  updateTodoShowAll: PropTypes.func.isRequired,\n  updateTodoShowActive: PropTypes.func.isRequired,\n  updateTodoShowComplete: PropTypes.func.isRequired,\n  removeAllComplete: PropTypes.func.isRequired,\n};\n","import React from 'react';\nimport TodoForm from './components/TodoForm';\nimport Todo from './components/Todo';\nimport Footer from './components/Footer';\n\nclass App extends React.Component {\n  state = {\n    todos: [],\n    todosToShow: 'all',\n  }\n\n  addTodo = (todo) => {\n    if (todo.text !== '' && todo.text !== null && todo.text !== undefined) {\n      this.setState(prevState => ({\n        todos: [todo, ...prevState.todos],\n      }));\n    }\n  };\n\n    toggleComplete = (id) => {\n      this.setState(prevState => ({\n        todos: prevState.todos.map((todo) => {\n          if (todo.id === id) {\n            return {\n              ...todo,\n              complete: !todo.complete,\n            };\n          }\n\n          return todo;\n        }),\n      }));\n    }\n\n    updateTodoShow = (string) => {\n      this.setState({\n        todosToShow: string,\n      });\n    }\n\n    handleDeleteTodo = (id) => {\n      this.setState(prevState => ({\n        todos: prevState.todos.filter(todo => todo.id !== id),\n      }));\n    }\n\n    removeAllComplete = () => {\n      this.setState(prevState => ({\n        todos: prevState.todos.filter(todo => !todo.complete),\n      }));\n    }\n\n    onToggleAllComplete = () => {\n      this.setState(prevState => ({\n        todos: prevState.todos.map(todo => ({\n          ...todo,\n          complete: prevState.toggleAllComplete,\n        })),\n        toggleAllComplete: !prevState.toggleAllComplete,\n      }));\n    }\n\n    render() {\n      let todos = [];\n\n      if (this.state.todosToShow === 'all') {\n        todos = this.state.todos;\n      } else if (this.state.todosToShow === 'active') {\n        todos = this.state.todos.filter(todo => !todo.complete);\n      } else if (this.state.todosToShow === 'complete') {\n        todos = this.state.todos.filter(todo => todo.complete);\n      }\n\n      return (\n        <section className=\"todoapp\">\n          <TodoForm onSubmit={this.addTodo} />\n\n          <section className=\"main\" style={{ display: 'block' }}>\n            <input\n              type=\"checkbox\"\n              id=\"toggle-all\"\n              className=\"toggle-all\"\n              name=\"toggleAll\"\n            />\n\n            <label htmlFor=\"toggle-all\">Mark all as complete</label>\n\n            <ul className=\"todo-list\">\n              {todos.map(todo => (\n                <Todo\n                  key={todo.id}\n                  todo={todo}\n                  toggleComplete={() => this.toggleComplete(todo.id)}\n                  onDelete={() => this.handleDeleteTodo(todo.id)}\n                />\n              ))}\n            </ul>\n          </section>\n          <Footer\n            updateTodoShowAll={() => this.updateTodoShow('all')}\n            updateTodoShowActive={() => this.updateTodoShow('active')}\n            updateTodoShowComplete={() => this.updateTodoShow('complete')}\n            removeAllComplete={this.removeAllComplete}\n            todos={todos}\n          />\n        </section>\n      );\n    }\n}\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './base.css';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}